import { Timestamp } from '@react-native-firebase/firestore';

// Payment status enumeration
export enum PaymentStatus {
  PENDING = 'pending',
  PAID = 'paid',
  FAILED = 'failed',
  CANCELLED = 'cancelled',
  REFUNDED = 'refunded',
  PARTIAL = 'partial',
  OVERDUE = 'overdue',
  WAIVED = 'waived'
}

// Payment method enumeration
export enum PaymentMethod {
  CASH = 'cash',
  BANK_TRANSFER = 'bank_transfer',
  UPI = 'upi',
  CHEQUE = 'cheque',
  CREDIT_CARD = 'credit_card',
  DEBIT_CARD = 'debit_card',
  NET_BANKING = 'net_banking',
  WALLET = 'wallet',
  ONLINE = 'online'
}

// Payment type enumeration
export enum PaymentType {
  RENT = 'rent',
  DEPOSIT = 'deposit',
  MAINTENANCE = 'maintenance',
  ELECTRICITY = 'electricity',
  WATER = 'water',
  INTERNET = 'internet',
  FOOD = 'food',
  LATE_FEE = 'late_fee',
  SECURITY_DEPOSIT = 'security_deposit',
  OTHER = 'other'
}

// Transaction status enumeration
export enum TransactionStatus {
  INITIATED = 'initiated',
  PROCESSING = 'processing',
  SUCCESS = 'success',
  FAILED = 'failed',
  CANCELLED = 'cancelled',
  REFUNDED = 'refunded'
}

// Base payment interface with required fields
export interface BasePayment {
  id: string; // Document ID - REQUIRED
  tenantId: string; // REQUIRED - UID of the tenant
  propertyId: string; // REQUIRED - Reference to property
  roomId: string; // REQUIRED - Reference to room
  amount: number; // REQUIRED
  type: PaymentType; // REQUIRED
  status: PaymentStatus; // REQUIRED
  month: string; // REQUIRED - Format: "YYYY-MM"
  dueDate: Timestamp; // REQUIRED
  createdAt: Timestamp; // REQUIRED
  updatedAt: Timestamp; // REQUIRED
}

// Required fields for payment creation
export interface CreatePaymentData {
  tenantId: string;
  propertyId: string;
  roomId: string;
  amount: number;
  type: PaymentType;
  month: string;
  dueDate: Timestamp;
}

// Optional fields for payment updates
export interface UpdatePaymentData {
  amount?: number;
  status?: PaymentStatus;
  paymentMethod?: PaymentMethod;
  transactionId?: string;
  paidAt?: Timestamp;
  lateFee?: number;
  notes?: string;
  receiptUrl?: string;
}

// Complete payment model with all fields
export interface Payment extends BasePayment {
  // Optional payment details
  paymentMethod?: PaymentMethod;
  transactionId?: string;
  paidAt?: Timestamp;
  lateFee?: number;
  notes?: string;
  receiptUrl?: string;
  
  // Optional transaction details
  transactionDetails?: {
    gateway?: string; // e.g., "Razorpay", "PayU", "Stripe"
    gatewayTransactionId?: string;
    gatewayResponse?: any;
    processingFee?: number;
    taxAmount?: number;
    totalAmount?: number;
  };
  
  // Optional bank details
  bankDetails?: {
    accountNumber?: string;
    ifscCode?: string;
    bankName?: string;
    branchName?: string;
    transactionReference?: string;
  };
  
  // Optional UPI details
  upiDetails?: {
    upiId?: string;
    merchantId?: string;
    transactionReference?: string;
  };
  
  // Optional cheque details
  chequeDetails?: {
    chequeNumber?: string;
    bankName?: string;
    branchName?: string;
    clearingDate?: Timestamp;
  };
  
  // Optional refund details
  refundDetails?: {
    refundedAt?: Timestamp;
    refundedBy?: string;
    refundAmount?: number;
    refundReason?: string;
    refundMethod?: PaymentMethod;
    refundTransactionId?: string;
  };
  
  // Optional metadata
  metadata?: {
    autoGenerated: boolean;
    reminderSent: boolean;
    reminderSentAt?: Timestamp;
    reminderCount: number;
    overdueDays?: number;
    processedBy?: string;
    verified: boolean;
    verifiedAt?: Timestamp;
    verifiedBy?: string;
  };
  
  // Optional analytics
  analytics?: {
    paymentDelay?: number; // in days
    isLatePayment: boolean;
    previousPaymentDate?: Timestamp;
    averagePaymentDelay?: number; // in days
  };
}

// Payment validation schema
export interface PaymentValidation {
  isValid: boolean;
  errors: {
    tenantId?: string;
    propertyId?: string;
    roomId?: string;
    amount?: string;
    type?: string;
    month?: string;
    dueDate?: string;
  };
}

// Payment search filters
export interface PaymentFilters {
  tenantId?: string;
  propertyId?: string;
  roomId?: string;
  status?: PaymentStatus[];
  type?: PaymentType[];
  paymentMethod?: PaymentMethod[];
  month?: string;
  dateRange?: {
    startDate: Timestamp;
    endDate: Timestamp;
  };
  minAmount?: number;
  maxAmount?: number;
  verified?: boolean;
}

// Payment statistics
export interface PaymentStats {
  totalPayments: number;
  totalAmount: number;
  paidAmount: number;
  pendingAmount: number;
  overdueAmount: number;
  averagePaymentDelay: number;
  totalLatePayments: number;
  totalLateFees: number;
}

// Payment reminder interface
export interface PaymentReminder {
  paymentId: string;
  tenantId: string;
  reminderType: 'due_date' | 'overdue' | 'final_notice';
  sentAt: Timestamp;
  sentBy: string;
  sentVia: 'email' | 'sms' | 'push' | 'whatsapp';
  message: string;
  status: 'sent' | 'delivered' | 'failed';
}

// Payment receipt interface
export interface PaymentReceipt {
  paymentId: string;
  receiptNumber: string;
  generatedAt: Timestamp;
  generatedBy: string;
  url: string;
  format: 'pdf' | 'image';
  size?: number; // in bytes
}

// Payment schedule interface
export interface PaymentSchedule {
  tenantId: string;
  propertyId: string;
  roomId: string;
  monthlyRent: number;
  dueDay: number; // Day of month when rent is due
  startDate: Timestamp;
  endDate?: Timestamp;
  isActive: boolean;
  autoDebitEnabled: boolean;
  createdAt: Timestamp;
  updatedAt: Timestamp;
}

// Payment summary interface
export interface PaymentSummary {
  tenantId: string;
  month: string;
  totalDue: number;
  totalPaid: number;
  totalPending: number;
  totalOverdue: number;
  lateFees: number;
  paymentCount: number;
  lastPaymentDate?: Timestamp;
  nextPaymentDate?: Timestamp;
}
