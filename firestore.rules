rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================== HELPER FUNCTIONS ====================
    
    // Helper function to check if user owns a property
    function userOwnsProperty(propertyId) {
      return exists(/databases/$(database)/documents/properties/$(propertyId)) &&
             get(/databases/$(database)/documents/properties/$(propertyId)).data.ownerId == request.auth.uid;
    }

    // Helper function to check if user is a tenant of a property
    function userIsTenantOfProperty(propertyId) {
      return exists(/databases/$(database)/documents/tenants/{tenantId}) &&
             resource.data.propertyId == propertyId &&
             resource.data.userId == request.auth.uid;
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if user is an owner role
    function isOwnerRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
    }

    // Helper function to check if user is a tenant role
    function isTenantRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'tenant';
    }

    // ==================== USERS COLLECTION ====================
    
    // Allow users to access their own document
    match /users/{userId} {
      // Read and write own profile
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Allow listing users by role (for tenant selection)
      allow list: if isAuthenticated() && 
        (resource.data.role == 'tenant' || resource.data.role == 'owner');
      
      // Allow creating own profile document (for onboarding)
      allow create: if isAuthenticated() && isOwner(userId);
      
      // Allow property owners to read tenant user profiles for properties they own
      allow read: if isAuthenticated() && 
        resource.data.role == 'tenant';
    }

    // ==================== PROPERTIES COLLECTION ====================
    
    // Allow users to manage properties they own
    match /properties/{propertyId} {
      // Read and write own properties
      allow read, write: if isAuthenticated() && 
        (resource == null || resource.data.ownerId == request.auth.uid);
      
      // Allow reading properties they own (for listing)
      allow read: if isAuthenticated() && 
        resource.data.ownerId == request.auth.uid;
      
      // Allow all authenticated users to read active properties (for tenant browsing)
      allow read: if isAuthenticated() && resource.data.status == 'active';
    }

    // ==================== ROOM MAPPINGS COLLECTION ====================
    
    // Allow users to manage room mappings for properties they own
    match /room_mappings/{propertyId} {
      allow read, write: if isAuthenticated() && 
        (resource == null || userOwnsProperty(propertyId));
    }

    // ==================== TENANTS COLLECTION ====================
    
    // Allow users to manage tenants for properties they own
    match /tenants/{tenantId} {
      // Read and write tenants for owned properties
      allow read, write: if isAuthenticated() && 
        (resource == null || userOwnsProperty(resource.data.propertyId));
      
      // Allow listing tenants for owned properties
      allow list: if isAuthenticated() && 
        (resource.data.propertyId != null && userOwnsProperty(resource.data.propertyId));
    }

    // ==================== TENANT APPLICATIONS COLLECTION ====================
    
    // FIXED: Individual document access for tenant_applications
    match /tenant_applications/{applicationId} {
      // Allow tenants to create applications
      allow create: if isAuthenticated() && 
        request.resource.data.tenantId == request.auth.uid;
      
      // Allow tenants to read their own applications
      allow read: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      
      // Allow property owners to read applications for their properties
      allow read: if isAuthenticated() && 
        userOwnsProperty(resource.data.propertyId);
      
      // Allow property owners to update applications for their properties
      allow update: if isAuthenticated() && 
        userOwnsProperty(resource.data.propertyId);
      
      // Allow tenants to update their own applications (for status changes)
      allow update: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      
      // Allow property owners to delete applications for their properties
      allow delete: if isAuthenticated() && 
        userOwnsProperty(resource.data.propertyId);
      
      // Allow tenants to delete their own applications
      allow delete: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
    }

    // FIXED: List operations for tenant_applications
    match /tenant_applications/{applicationId} {
      // Allow listing applications by tenant ID
      allow list: if isAuthenticated() && 
        request.query.filters[0].op == '==' &&
        request.query.filters[0].fieldPath == 'tenantId' &&
        request.query.filters[0].value == request.auth.uid;
      
      // Allow listing applications by owner ID
      allow list: if isAuthenticated() && 
        request.query.filters[0].op == '==' &&
        request.query.filters[0].fieldPath == 'ownerId' &&
        request.query.filters[0].value == request.auth.uid;
      
      // Allow listing applications by owner ID with status filter
      allow list: if isAuthenticated() && 
        request.query.filters[0].op == '==' &&
        request.query.filters[0].fieldPath == 'ownerId' &&
        request.query.filters[0].value == request.auth.uid &&
        request.query.filters[1].op == '==' &&
        request.query.filters[1].fieldPath == 'status';
      
      // Allow listing all applications for owners (with limit)
      allow list: if isAuthenticated() && 
        request.query.limit != null &&
        request.query.limit <= 100;
    }

    // ==================== PAYMENTS COLLECTION ====================
    
    match /payments/{paymentId} {
      // Allow property owners to manage payments for their properties
      allow read, write: if isAuthenticated() && 
        (resource == null || userOwnsProperty(resource.data.propertyId));
      
      // Allow tenants to read their own payments
      allow read: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      
      // Allow tenants to create payments for their assigned properties
      allow create: if isAuthenticated() && 
        request.resource.data.tenantId == request.auth.uid;
    }

    // ==================== MAINTENANCE REQUESTS COLLECTION ====================
    
    match /maintenance_requests/{requestId} {
      // Allow property owners to manage maintenance requests for their properties
      allow read, write: if isAuthenticated() && 
        (resource == null || userOwnsProperty(resource.data.propertyId));
      
      // Allow tenants to read and create maintenance requests for their assigned properties
      allow read, create: if isAuthenticated() && 
        (resource == null || resource.data.tenantId == request.auth.uid) &&
        (request.resource == null || request.resource.data.tenantId == request.auth.uid);
      
      // Allow tenants to update their own maintenance requests
      allow update: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
    }

    // ==================== NOTIFICATIONS COLLECTION ====================
    
    match /notifications/{notificationId} {
      // Allow users to read and manage their own notifications
      allow read, write: if isAuthenticated() && 
        (resource == null || resource.data.userId == request.auth.uid);
      
      // Allow listing notifications for the current user
      allow list: if isAuthenticated() && 
        request.query.filters[0].op == '==' &&
        request.query.filters[0].fieldPath == 'userId' &&
        request.query.filters[0].value == request.auth.uid;
    }

    // ==================== RENTALS COLLECTION ====================
    
    match /rentals/{rentalId} {
      // Allow property owners to manage rentals for their properties
      allow read, write: if isAuthenticated() && 
        (resource == null || userOwnsProperty(resource.data.propertyId));
      
      // Allow tenants to read their own rentals
      allow read: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
    }

    // ==================== DEFAULT DENY ====================
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
