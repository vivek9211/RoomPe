rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user owns a property
    function userOwnsProperty(propertyId) {
      return exists(/databases/$(database)/documents/properties/$(propertyId)) &&
             get(/databases/$(database)/documents/properties/$(propertyId)).data.ownerId == request.auth.uid;
    }

    
    // Users collection rules
    match /users/{userId} {
      // Allow users to access their own document
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to create their own profile document (for onboarding)
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Allow property owners to read tenant user profiles for tenant selection
      allow read: if request.auth != null && 
        resource.data.role == 'tenant';
      
      // Allow listing users by role (for tenant selection)
      allow list: if request.auth != null;
      
      // Allow reading individual user documents for tenant selection
      allow get: if request.auth != null;
    }

    // Properties collection rules
    match /properties/{propertyId} {
      // Allow users to manage properties they own
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.ownerId == request.auth.uid);
      
      // Allow all authenticated users to read active properties (for tenant browsing)
      allow read: if request.auth != null && resource.data.status == 'active';
      
      // Allow tenants to read properties they're renting
      allow read: if request.auth != null && 
        (resource.data.ownerId == request.auth.uid ||
         request.auth.uid in resource.data.tenantIds);
      
      // Allow tenants to read properties for payment processing
      // This allows tenants to read property data to check payment settings
      allow read: if request.auth != null;
    }

    // Allow users to manage room mappings for properties they own
    match /room_mappings/{propertyId} {
      allow read, write: if request.auth != null && 
        (resource == null || userOwnsProperty(propertyId));
      
      // Allow all authenticated users to read room mappings (simplified for now)
      // In production, you might want to restrict this further
      allow read: if request.auth != null;
    }

    // Tenants collection rules
    match /tenants/{tenantId} {
      // Allow users to manage tenants for properties they own
      allow read, write: if request.auth != null && 
        (resource == null || userOwnsProperty(resource.data.propertyId));
      
      // Allow users to list tenants for properties they own
      allow list: if request.auth != null && 
        (request.query.propertyId != null && userOwnsProperty(request.query.propertyId));
      
      // Allow listing all tenants for tenant management
      allow list: if request.auth != null;
      
      // Allow tenants to read their own tenant records
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid ||
         userOwnsProperty(resource.data.propertyId));
      
      // Allow tenants to update their own tenant records (for deposit status, etc.)
      allow update: if request.auth != null && 
        (resource.data.userId == request.auth.uid ||
         userOwnsProperty(resource.data.propertyId));
      
      // Allow tenants to create their own tenant records
      allow create: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid ||
         userOwnsProperty(request.resource.data.propertyId));
    }

    // Rentals collection rules
    match /rentals/{rentalId} {
      // Allow users to manage rentals for properties they own
      allow read, write: if request.auth != null && 
        (resource == null || userOwnsProperty(resource.data.propertyId));
      
      // Allow tenants to read their own rental agreements
      allow read: if request.auth != null && 
        (resource.data.tenantId == request.auth.uid ||
         userOwnsProperty(resource.data.propertyId));
    }

    // Payments collection rules
    match /payments/{paymentId} {
      // Allow tenants to read their own payments
      // Check if the user is a tenant and the payment belongs to them
      allow read: if request.auth != null && 
        (resource.data.tenantId == request.auth.uid ||
         userOwnsProperty(resource.data.propertyId) ||
         // Allow if user is a tenant for this payment (check tenant document)
         (exists(/databases/$(database)/documents/tenants/$(resource.data.tenantId)) &&
          get(/databases/$(database)/documents/tenants/$(resource.data.tenantId)).data.userId == request.auth.uid));
      
      // Allow property owners to read payments for their properties
      allow read: if request.auth != null && 
        userOwnsProperty(resource.data.propertyId);
      
      // Allow tenants to create payments (for manual payments)
      allow create: if request.auth != null && 
        (request.resource.data.tenantId == request.auth.uid ||
         // Allow if user is a tenant for this payment (check tenant document)
         (exists(/databases/$(database)/documents/tenants/$(request.resource.data.tenantId)) &&
          get(/databases/$(database)/documents/tenants/$(request.resource.data.tenantId)).data.userId == request.auth.uid));
      
      // Allow property owners to create payments for their properties
      allow create: if request.auth != null && 
        userOwnsProperty(request.resource.data.propertyId);
      
      // Allow tenants to update their own payments (for payment status updates)
      allow update: if request.auth != null && 
        (resource.data.tenantId == request.auth.uid ||
         userOwnsProperty(resource.data.propertyId) ||
         // Allow if user is a tenant for this payment (check tenant document)
         (exists(/databases/$(database)/documents/tenants/$(resource.data.tenantId)) &&
          get(/databases/$(database)/documents/tenants/$(resource.data.tenantId)).data.userId == request.auth.uid));
      
      // Allow property owners to update payments for their properties
      allow update: if request.auth != null && 
        userOwnsProperty(resource.data.propertyId);
      
      // Allow listing payments for authenticated users
      allow list: if request.auth != null;
    }

    // Maintenance requests collection rules
    match /maintenance_requests/{requestId} {
      // Allow users to manage maintenance requests for properties they own
      allow read, write: if request.auth != null && 
        (resource == null || userOwnsProperty(resource.data.propertyId));
      
      // Allow tenants to create and read their own maintenance requests
      allow create: if request.auth != null && 
        request.resource.data.tenantId == request.auth.uid;
      
      allow read, update: if request.auth != null && 
        (resource.data.tenantId == request.auth.uid ||
         userOwnsProperty(resource.data.propertyId));
    }

    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
        (resource == null || userOwnsProperty(resource.data.propertyId));
    }

    // ==================== TENANT APPLICATIONS RULES ====================
    
    // FIXED: Single, comprehensive rule for tenant_applications
    match /tenant_applications/{applicationId} {
      // Allow tenants to create applications
      allow create: if request.auth != null && 
        request.resource.data.tenantId == request.auth.uid;
      
      // Allow tenants to read their own applications
      allow read: if request.auth != null && 
        resource.data.tenantId == request.auth.uid;
      
      // Allow property owners to read applications for their properties
      allow read: if request.auth != null && 
        resource.data.ownerId == request.auth.uid;
      
      // FIXED: Allow property owners to update applications for their properties
      // This includes changing status to 'approved', 'rejected', etc.
      allow update: if request.auth != null && 
        resource.data.ownerId == request.auth.uid;
      
      // Allow tenants to update their own applications (for withdrawing)
      allow update: if request.auth != null && 
        resource.data.tenantId == request.auth.uid &&
        request.resource.data.status in ['withdrawn'];
      
      // Allow listing for authenticated users (simplified for now)
      allow list: if request.auth != null;
    }
  }
}